using System;
using System.IO;
using System.Linq;
using System.Threading;
using ELFSharp.ELF.Sections;
using ELFSharp.ELF;

namespace MinecraftSymbols
{
    internal class Program
    {
        public static void Main(string[] args)
        {
            Console.WriteLine("File path :");
            Console.Write("> ");
            string FilePath = Console.ReadLine();

            if (!File.Exists(FilePath))
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("File not found.");
                return;
            }

            InitDump(); 
            
            Thread.Sleep(1000);
            writeCpp("// File automatically generated by MinecraftSymbols");
            writeCpp("");
            
            IELF Elf = ELFReader.Load(FilePath);
            SymbolTable<uint> Symbols = (SymbolTable<uint>) Elf.GetSection(".dynsym");
            
            foreach (var Symbol in Symbols.Entries)
            {
                if (Symbol.Value != 0)
                {
                    // ToDo more work on writeCpp
                    if (Symbol.Type == SymbolType.Object)
                    {
                        writeCpp("// Address : " + Symbol.Value.ToString("x8"));
                        writeCpp("extern \"C\"" + Environment.NewLine + "{" + Environment.NewLine + "    void* " + Symbol.Name + ";\n}");
                        writeCpp("");
                    }
                    
                    if (Symbol.Type == SymbolType.Function)
                    {
                        writeCpp("// Address : " + Symbol.Value.ToString("x8"));
                        writeCpp("extern \"C\"" + Environment.NewLine + "{" + Environment.NewLine + "    void* " + Symbol.Name + "_ptr;\n}");
                        writeCpp("");
                    }
                }
            }

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("All Minecraft symbols dumped.");
        }

        static void writeCpp(string line)
        {
            File.WriteAllText("dump.cpp", File.ReadAllText("dump.cpp") + line + "\n");
        }

        static void InitDump()
        {
            if (File.Exists("dump.cpp"))
            {
                File.Delete("dump.cpp");
            }

            File.Create("dump.cpp").Close();
        }
    }
}